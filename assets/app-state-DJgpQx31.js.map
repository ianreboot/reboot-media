{"version":3,"file":"app-state-DJgpQx31.js","sources":["../../src/contexts/ConversionOptimizationContext.tsx","../../src/contexts/ABTestContext.tsx","../../src/hooks/useABTestHooks.ts","../../src/contexts/LeadFormContext.tsx","../../src/hooks/useCoreWebVitals.ts","../../src/contexts/ErrorContext.tsx"],"sourcesContent":["/**\n * Conversion Optimization Context\n * Manages personalization, exit-intent, and conversion tracking\n */\n\nimport React, { createContext, useContext, useState, useEffect, type ReactNode, useCallback } from 'react';\n\n// Lead scoring types (imported from backend integration)\nexport interface LeadScore {\n  demographic: number;\n  behavioral: number;\n  firmographic: number;\n  intent: number;\n  engagement: number;\n  total: number;\n  tier: 'Hot' | 'Warm' | 'Cold' | 'Unqualified';\n  priority: 1 | 2 | 3 | 4 | 5;\n  recommendedAction: string;\n  estimatedValue: number;\n  conversionProbability: number;\n  qualificationReasons: string[];\n  disqualificationReasons: string[];\n}\n\nexport interface BehavioralData {\n  pageViews: number;\n  timeOnSite: number;\n  contentEngagement: string[];\n  formAbandonment: boolean;\n  returnVisit: boolean;\n  referralSource: string;\n  deviceType: 'desktop' | 'mobile' | 'tablet';\n  scrollDepth: number;\n  interactions: InteractionEvent[];\n  location?: {\n    country: string;\n    region: string;\n    city: string;\n  };\n}\n\nexport interface InteractionEvent {\n  type: 'click' | 'hover' | 'scroll' | 'form_focus' | 'form_abandon' | 'cta_view';\n  element: string;\n  timestamp: Date;\n  value?: string | number;\n  metadata?: Record<string, any>;\n}\n\nexport interface PersonalizationConfig {\n  leadTier: LeadScore['tier'];\n  messaging: {\n    heroTitle: string;\n    heroSubtitle: string;\n    ctaText: string;\n    urgencyMessage?: string;\n    socialProof: string;\n  };\n  pricing: {\n    showDiscount: boolean;\n    emphasizeValue: boolean;\n    highlightSavings: boolean;\n    customMessage?: string;\n  };\n  content: {\n    testimonials: string[];\n    caseStudies: string[];\n    features: string[];\n  };\n}\n\nexport interface ExitIntentConfig {\n  enabled: boolean;\n  delay: number; // ms before showing after exit intent\n  maxShows: number; // max times to show per session\n  leadTierSpecific: {\n    [K in LeadScore['tier']]: {\n      title: string;\n      message: string;\n      offer: string;\n      ctaText: string;\n    };\n  };\n}\n\nexport interface ConversionFunnelStep {\n  id: string;\n  name: string;\n  description: string;\n  completed: boolean;\n  timestamp?: Date;\n  value?: number;\n  metadata?: Record<string, any>;\n}\n\nexport interface UserSession {\n  id: string;\n  userId: string;\n  startTime: Date;\n  endTime?: Date;\n  pageViews: string[];\n  interactions: InteractionEvent[];\n  behavioralData: BehavioralData;\n  leadScore?: LeadScore;\n  conversionFunnel: ConversionFunnelStep[];\n  personalization: PersonalizationConfig;\n  exitIntentShown: number;\n  conversions: ConversionEvent[];\n}\n\nexport interface ConversionEvent {\n  id: string;\n  type: 'form_submission' | 'email_signup' | 'pricing_engagement' | 'call_booking' | 'download';\n  timestamp: Date;\n  value: number;\n  metadata?: Record<string, any>;\n}\n\ninterface ConversionOptimizationContextType {\n  // Session Management\n  session: UserSession;\n  leadScore: LeadScore | null;\n  personalization: PersonalizationConfig;\n  \n  // Behavioral Tracking\n  trackInteraction: (interaction: Omit<InteractionEvent, 'timestamp'>) => void;\n  trackPageView: (page: string) => void;\n  trackScrollDepth: (depth: number) => void;\n  trackFormAbandonment: (formId: string, fieldName: string) => void;\n  \n  // Conversion Tracking\n  trackConversion: (type: ConversionEvent['type'], value?: number, metadata?: Record<string, any>) => void;\n  updateFunnelStep: (stepId: string, completed: boolean, value?: number, metadata?: Record<string, any>) => void;\n  \n  // Personalization\n  updateLeadScore: (score: LeadScore) => void;\n  getPersonalizedContent: (contentType: string) => any;\n  getTierSpecificMessage: (messageType: string) => string;\n  \n  // Exit Intent\n  showExitIntent: () => void;\n  dismissExitIntent: () => void;\n  isExitIntentEligible: () => boolean;\n  \n  // Analytics\n  getConversionFunnelData: () => ConversionFunnelStep[];\n  getBehavioralInsights: () => BehavioralData;\n  getSessionDuration: () => number;\n  \n  // Optimization Helpers\n  shouldShowUrgency: () => boolean;\n  getOptimalCTAText: () => string;\n  getRecommendedNextAction: () => string;\n}\n\nconst ConversionOptimizationContext = createContext<ConversionOptimizationContextType | null>(null);\n\n// Default personalization configurations for each lead tier\nconst TIER_PERSONALIZATION: Record<LeadScore['tier'], PersonalizationConfig> = {\n  Hot: {\n    leadTier: 'Hot',\n    messaging: {\n      heroTitle: 'Ready to Transform Your Marketing? Let\\'s Talk Today.',\n      heroSubtitle: 'High-growth companies need strategic marketing leadership. Get your custom growth plan in 24 hours.',\n      ctaText: 'Schedule Strategy Call Now',\n      urgencyMessage: 'âš¡ Priority Response: We\\'ll contact you within 1 hour',\n      socialProof: 'Join 200+ companies already accelerating growth'\n    },\n    pricing: {\n      showDiscount: true,\n      emphasizeValue: true,\n      highlightSavings: true,\n      customMessage: 'Enterprise pricing available - significant savings for qualified companies'\n    },\n    content: {\n      testimonials: ['enterprise_success', 'fast_results', 'roi_focused'],\n      caseStudies: ['enterprise_transformation', 'rapid_scale'],\n      features: ['strategic_leadership', 'executive_support', 'rapid_implementation']\n    }\n  },\n  Warm: {\n    leadTier: 'Warm',\n    messaging: {\n      heroTitle: 'Scale Your Marketing with Expert CMO Guidance',\n      heroSubtitle: 'Growth-stage companies trust us to build marketing systems that deliver consistent results.',\n      ctaText: 'Get My Growth Strategy',\n      socialProof: 'Trusted by 200+ growing companies'\n    },\n    pricing: {\n      showDiscount: false,\n      emphasizeValue: true,\n      highlightSavings: false\n    },\n    content: {\n      testimonials: ['growth_success', 'system_building', 'team_development'],\n      caseStudies: ['growth_acceleration', 'system_optimization'],\n      features: ['strategic_planning', 'team_coaching', 'system_building']\n    }\n  },\n  Cold: {\n    leadTier: 'Cold',\n    messaging: {\n      heroTitle: 'Build Marketing That Actually Drives Growth',\n      heroSubtitle: 'Stop wasting money on marketing that doesn\\'t work. Get a proven system that delivers results.',\n      ctaText: 'Learn More',\n      socialProof: 'Used by companies at every growth stage'\n    },\n    pricing: {\n      showDiscount: false,\n      emphasizeValue: true,\n      highlightSavings: false\n    },\n    content: {\n      testimonials: ['foundational_success', 'problem_solving', 'education'],\n      caseStudies: ['foundation_building', 'problem_diagnosis'],\n      features: ['strategic_foundation', 'problem_diagnosis', 'education']\n    }\n  },\n  Unqualified: {\n    leadTier: 'Unqualified',\n    messaging: {\n      heroTitle: 'Marketing Insights for Growing Businesses',\n      heroSubtitle: 'Learn proven strategies used by successful companies to build sustainable growth.',\n      ctaText: 'Get Free Resources',\n      socialProof: 'Join thousands learning marketing strategy'\n    },\n    pricing: {\n      showDiscount: false,\n      emphasizeValue: false,\n      highlightSavings: false\n    },\n    content: {\n      testimonials: ['educational', 'inspiration', 'accessibility'],\n      caseStudies: ['educational_content', 'inspiration'],\n      features: ['educational_resources', 'foundational_guidance', 'community_access']\n    }\n  }\n};\n\n// Default exit intent configurations\nconst EXIT_INTENT_CONFIG: ExitIntentConfig = {\n  enabled: true,\n  delay: 500,\n  maxShows: 2,\n  leadTierSpecific: {\n    Hot: {\n      title: 'Wait! Let\\'s Schedule Your Strategy Call',\n      message: 'You\\'re clearly ready for growth. Don\\'t leave without booking your priority consultation.',\n      offer: 'Free 30-minute strategy session + custom growth plan',\n      ctaText: 'Book My Priority Call'\n    },\n    Warm: {\n      title: 'Before You Go - Get Your Free Growth Audit',\n      message: 'We can show you exactly what\\'s holding back your marketing.',\n      offer: 'Free marketing audit + recommendations (normally $2,500)',\n      ctaText: 'Get My Free Audit'\n    },\n    Cold: {\n      title: 'Get Our Marketing Success Framework',\n      message: 'Download our proven framework used by 200+ companies.',\n      offer: 'Free Marketing Growth Framework + Templates',\n      ctaText: 'Download Free Framework'\n    },\n    Unqualified: {\n      title: 'Stay Updated with Marketing Insights',\n      message: 'Get weekly insights on marketing strategy and growth.',\n      offer: 'Join our marketing insights newsletter',\n      ctaText: 'Get Weekly Insights'\n    }\n  }\n};\n\n// Default funnel steps\nconst DEFAULT_FUNNEL_STEPS: ConversionFunnelStep[] = [\n  { id: 'page_view', name: 'Page View', description: 'Visitor viewed the page', completed: false },\n  { id: 'engagement', name: 'Content Engagement', description: 'Engaged with content for 30+ seconds', completed: false },\n  { id: 'pricing_view', name: 'Pricing View', description: 'Viewed pricing information', completed: false },\n  { id: 'form_start', name: 'Form Started', description: 'Started lead form', completed: false },\n  { id: 'form_complete', name: 'Form Completed', description: 'Completed lead form', completed: false },\n  { id: 'conversion', name: 'Conversion', description: 'Completed primary conversion action', completed: false }\n];\n\nexport const ConversionOptimizationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [session, setSession] = useState<UserSession | null>(null);\n  const [leadScore, setLeadScore] = useState<LeadScore | null>(null);\n  const [personalization, setPersonalization] = useState<PersonalizationConfig>(TIER_PERSONALIZATION.Unqualified);\n\n  // Initialize session on mount\n  useEffect(() => {\n    const initializeSession = () => {\n      const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const userId = localStorage.getItem('ab_test_user_id') || `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      const newSession: UserSession = {\n        id: sessionId,\n        userId,\n        startTime: new Date(),\n        pageViews: [window.location.pathname],\n        interactions: [],\n        behavioralData: {\n          pageViews: 1,\n          timeOnSite: 0,\n          contentEngagement: [],\n          formAbandonment: false,\n          returnVisit: localStorage.getItem(`visited_${userId}`) !== null,\n          referralSource: document.referrer || 'direct',\n          deviceType: getDeviceType(),\n          scrollDepth: 0,\n          interactions: []\n        },\n        conversionFunnel: DEFAULT_FUNNEL_STEPS.map(step => \n          step.id === 'page_view' \n            ? { ...step, completed: true, timestamp: new Date() }\n            : { ...step }\n        ),\n        personalization: TIER_PERSONALIZATION.Unqualified,\n        exitIntentShown: 0,\n        conversions: []\n      };\n\n      // Mark as return visitor\n      localStorage.setItem(`visited_${userId}`, 'true');\n      \n      setSession(newSession);\n    };\n\n    initializeSession();\n  }, []);\n\n  // Track time on site\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (session) {\n        setSession(prev => prev ? {\n          ...prev,\n          behavioralData: {\n            ...prev.behavioralData,\n            timeOnSite: (Date.now() - prev.startTime.getTime()) / 1000\n          }\n        } : null);\n      }\n    }, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [session]);\n\n  // Set up exit intent detection\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout;\n    \n    const handleMouseLeave = (event: MouseEvent) => {\n      if (event.clientY <= 0 && isExitIntentEligible()) {\n        timeoutId = setTimeout(() => {\n          showExitIntent();\n        }, EXIT_INTENT_CONFIG.delay);\n      }\n    };\n\n    const handleMouseEnter = () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n\n    document.addEventListener('mouseleave', handleMouseLeave);\n    document.addEventListener('mouseenter', handleMouseEnter);\n\n    return () => {\n      document.removeEventListener('mouseleave', handleMouseLeave);\n      document.removeEventListener('mouseenter', handleMouseEnter);\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, [session]);\n\n  // Device detection\n  const getDeviceType = (): 'desktop' | 'mobile' | 'tablet' => {\n    const width = window.innerWidth;\n    if (width <= 768) return 'mobile';\n    if (width <= 1024) return 'tablet';\n    return 'desktop';\n  };\n\n  // Track interaction\n  const trackInteraction = useCallback((interaction: Omit<InteractionEvent, 'timestamp'>) => {\n    const fullInteraction: InteractionEvent = {\n      ...interaction,\n      timestamp: new Date()\n    };\n\n    setSession(prev => {\n      if (!prev) return null;\n      \n      const updatedSession = {\n        ...prev,\n        interactions: [...prev.interactions, fullInteraction],\n        behavioralData: {\n          ...prev.behavioralData,\n          interactions: [...prev.behavioralData.interactions, fullInteraction]\n        }\n      };\n\n      // Check for engagement milestone within the same state update\n      if (updatedSession.behavioralData.timeOnSite >= 30 && !updatedSession.conversionFunnel.find(s => s.id === 'engagement')?.completed) {\n        updatedSession.conversionFunnel = updatedSession.conversionFunnel.map(step => \n          step.id === 'engagement' \n            ? { ...step, completed: true, timestamp: new Date() }\n            : step\n        );\n      }\n\n      return updatedSession;\n    });\n  }, []);\n\n  // Track page view\n  const trackPageView = useCallback((page: string) => {\n    setSession(prev => prev ? {\n      ...prev,\n      pageViews: [...prev.pageViews, page],\n      behavioralData: {\n        ...prev.behavioralData,\n        pageViews: prev.behavioralData.pageViews + 1,\n        contentEngagement: [...prev.behavioralData.contentEngagement, page]\n      }\n    } : null);\n  }, []);\n\n  // Track scroll depth\n  const trackScrollDepth = useCallback((depth: number) => {\n    setSession(prev => prev ? {\n      ...prev,\n      behavioralData: {\n        ...prev.behavioralData,\n        scrollDepth: Math.max(prev.behavioralData.scrollDepth, depth)\n      }\n    } : null);\n  }, []);\n\n  // Track form abandonment\n  const trackFormAbandonment = useCallback((formId: string, fieldName: string) => {\n    const abandonInteraction: InteractionEvent = {\n      type: 'form_abandon',\n      element: formId,\n      value: fieldName,\n      metadata: { abandonedAt: fieldName },\n      timestamp: new Date()\n    };\n\n    setSession(prev => prev ? {\n      ...prev,\n      interactions: [...prev.interactions, abandonInteraction],\n      behavioralData: {\n        ...prev.behavioralData,\n        formAbandonment: true,\n        interactions: [...prev.behavioralData.interactions, abandonInteraction]\n      }\n    } : null);\n  }, []);\n\n  // Track conversion\n  const trackConversion = useCallback((type: ConversionEvent['type'], value = 0, metadata?: Record<string, any>) => {\n    const conversion: ConversionEvent = {\n      id: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type,\n      timestamp: new Date(),\n      value,\n      metadata\n    };\n\n    setSession(prev => {\n      if (!prev) return null;\n      \n      let updatedFunnel = prev.conversionFunnel;\n      \n      // Update relevant funnel steps within the same state update\n      if (type === 'form_submission') {\n        updatedFunnel = updatedFunnel.map(step => {\n          if (step.id === 'form_complete' || step.id === 'conversion') {\n            return { ...step, completed: true, timestamp: new Date(), value };\n          }\n          return step;\n        });\n      }\n      \n      return {\n        ...prev,\n        conversions: [...prev.conversions, conversion],\n        conversionFunnel: updatedFunnel\n      };\n    });\n  }, []);\n\n  // Update funnel step\n  const updateFunnelStep = useCallback((stepId: string, completed: boolean, value?: number, metadata?: Record<string, any>) => {\n    setSession(prev => prev ? {\n      ...prev,\n      conversionFunnel: prev.conversionFunnel.map(step => \n        step.id === stepId \n          ? { ...step, completed, timestamp: completed ? new Date() : step.timestamp, value, metadata }\n          : step\n      )\n    } : null);\n  }, []);\n\n  // Update lead score and personalization\n  const updateLeadScore = useCallback((score: LeadScore) => {\n    setLeadScore(score);\n    setPersonalization(TIER_PERSONALIZATION[score.tier]);\n    \n    setSession(prev => prev ? {\n      ...prev,\n      leadScore: score,\n      personalization: TIER_PERSONALIZATION[score.tier]\n    } : null);\n  }, []);\n\n  // Get personalized content\n  const getPersonalizedContent = useCallback((contentType: string) => {\n    return personalization.content[contentType as keyof typeof personalization.content] || null;\n  }, [personalization]);\n\n  // Get tier-specific message\n  const getTierSpecificMessage = useCallback((messageType: string) => {\n    return personalization.messaging[messageType as keyof typeof personalization.messaging] || '';\n  }, [personalization]);\n\n  // Exit intent handlers\n  const showExitIntent = useCallback(() => {\n    if (!isExitIntentEligible()) return;\n\n    setSession(prev => prev ? {\n      ...prev,\n      exitIntentShown: prev.exitIntentShown + 1\n    } : null);\n\n    // Dispatch custom event for components to listen to\n    window.dispatchEvent(new CustomEvent('showExitIntent', {\n      detail: { \n        config: EXIT_INTENT_CONFIG.leadTierSpecific[leadScore?.tier || 'Unqualified'],\n        leadTier: leadScore?.tier || 'Unqualified'\n      }\n    }));\n  }, [leadScore, session]);\n\n  const dismissExitIntent = useCallback(() => {\n    window.dispatchEvent(new CustomEvent('dismissExitIntent'));\n  }, []);\n\n  const isExitIntentEligible = useCallback(() => {\n    if (!EXIT_INTENT_CONFIG.enabled || !session) return false;\n    return session.exitIntentShown < EXIT_INTENT_CONFIG.maxShows;\n  }, [session]);\n\n  // Analytics getters\n  const getConversionFunnelData = useCallback(() => {\n    return session?.conversionFunnel || [];\n  }, [session]);\n\n  const getBehavioralInsights = useCallback(() => {\n    return session?.behavioralData || {\n      pageViews: 0,\n      timeOnSite: 0,\n      contentEngagement: [],\n      formAbandonment: false,\n      returnVisit: false,\n      referralSource: 'unknown',\n      deviceType: 'desktop' as const,\n      scrollDepth: 0,\n      interactions: []\n    };\n  }, [session]);\n\n  const getSessionDuration = useCallback(() => {\n    return session ? (Date.now() - session.startTime.getTime()) / 1000 : 0;\n  }, [session]);\n\n  // Optimization helpers\n  const shouldShowUrgency = useCallback(() => {\n    return Boolean(leadScore?.tier === 'Hot' || (leadScore?.intent && leadScore.intent >= 75));\n  }, [leadScore]);\n\n  const getOptimalCTAText = useCallback(() => {\n    return personalization.messaging.ctaText;\n  }, [personalization]);\n\n  const getRecommendedNextAction = useCallback(() => {\n    return leadScore?.recommendedAction || 'Learn more about our services';\n  }, [leadScore]);\n\n  if (!session) {\n    return null; // Loading state\n  }\n\n  const contextValue: ConversionOptimizationContextType = {\n    session,\n    leadScore,\n    personalization,\n    trackInteraction,\n    trackPageView,\n    trackScrollDepth,\n    trackFormAbandonment,\n    trackConversion,\n    updateFunnelStep,\n    updateLeadScore,\n    getPersonalizedContent,\n    getTierSpecificMessage,\n    showExitIntent,\n    dismissExitIntent,\n    isExitIntentEligible,\n    getConversionFunnelData,\n    getBehavioralInsights,\n    getSessionDuration,\n    shouldShowUrgency,\n    getOptimalCTAText,\n    getRecommendedNextAction\n  };\n\n  return (\n    <ConversionOptimizationContext.Provider value={contextValue}>\n      {children}\n    </ConversionOptimizationContext.Provider>\n  );\n};\n\nexport const useConversionOptimization = (): ConversionOptimizationContextType => {\n  const context = useContext(ConversionOptimizationContext);\n  if (!context) {\n    throw new Error('useConversionOptimization must be used within a ConversionOptimizationProvider');\n  }\n  return context;\n};","/**\n * A/B Testing Context and Provider\n * Manages experiment configuration, variant assignment, and tracking\n */\n\nimport React, { createContext, useContext, useState, useEffect, type ReactNode } from 'react';\n\n// Types for A/B Testing Framework\nexport interface ABVariant {\n  id: string;\n  name: string;\n  weight: number;\n  config: Record<string, any>;\n}\n\nexport interface ABTest {\n  id: string;\n  name: string;\n  description: string;\n  variants: ABVariant[];\n  status: 'draft' | 'running' | 'paused' | 'completed';\n  trafficSplit: number[];\n  conversionGoals: string[];\n  targetAudience?: AudienceFilter;\n  startDate: Date;\n  endDate?: Date;\n  metrics: ABTestMetrics;\n}\n\nexport interface AudienceFilter {\n  geography?: string[];\n  deviceType?: ('desktop' | 'mobile' | 'tablet')[];\n  userType?: ('new' | 'returning')[];\n  leadScore?: { min: number; max: number };\n  revenue?: string[];\n}\n\nexport interface ABTestMetrics {\n  participants: number;\n  conversions: Record<string, number>; // variant_id -> conversions\n  conversionRate: Record<string, number>; // variant_id -> rate\n  statisticalSignificance: Record<string, number>; // variant_id -> p-value\n  confidence: Record<string, number>; // variant_id -> confidence level\n  winner?: string; // variant_id\n}\n\nexport interface ConversionEvent {\n  testId: string;\n  variantId: string;\n  userId: string;\n  eventType: string;\n  timestamp: Date;\n  value?: number;\n  metadata?: Record<string, any>;\n}\n\nexport interface UserAssignment {\n  userId: string;\n  assignments: Record<string, string>; // test_id -> variant_id\n  createdAt: Date;\n}\n\ninterface ABTestContextType {\n  // Test Management\n  activeTests: ABTest[];\n  userAssignments: UserAssignment;\n  \n  // Core Methods\n  getVariant: (testId: string) => string | null;\n  trackConversion: (testId: string, eventType: string, value?: number) => void;\n  \n  // Test Configuration\n  createTest: (test: Omit<ABTest, 'id' | 'metrics'>) => void;\n  updateTest: (testId: string, updates: Partial<ABTest>) => void;\n  startTest: (testId: string) => void;\n  pauseTest: (testId: string) => void;\n  stopTest: (testId: string) => void;\n  \n  // Analytics\n  getTestResults: (testId: string) => ABTestMetrics | null;\n  getConversionRate: (testId: string, variantId: string) => number;\n  isStatisticallySignificant: (testId: string, variantId: string) => boolean;\n  \n  // Utility\n  isUserInTest: (testId: string) => boolean;\n  getUserId: () => string;\n}\n\nconst ABTestContext = createContext<ABTestContextType | null>(null);\n\n// Default test configurations for the marketing site\nconst DEFAULT_TESTS: ABTest[] = [\n  {\n    id: 'hero_cta_test',\n    name: 'Hero CTA Button Text',\n    description: 'Testing different hero CTA button text for conversion optimization',\n    variants: [\n      { id: 'control', name: 'Get Free Analysis', weight: 50, config: { text: 'Get Free Analysis' } },\n      { id: 'variant_a', name: 'Unlock Growth Strategy', weight: 25, config: { text: 'Unlock Growth Strategy' } },\n      { id: 'variant_b', name: 'Get My Custom Plan', weight: 25, config: { text: 'Get My Custom Plan' } }\n    ],\n    status: 'running',\n    trafficSplit: [50, 25, 25],\n    conversionGoals: ['form_submission', 'email_signup'],\n    startDate: new Date(),\n    metrics: {\n      participants: 0,\n      conversions: {},\n      conversionRate: {},\n      statisticalSignificance: {},\n      confidence: {}\n    }\n  },\n  {\n    id: 'pricing_display_test',\n    name: 'Pricing Display Strategy',\n    description: 'Testing different pricing presentation approaches',\n    variants: [\n      { id: 'control', name: 'Standard Pricing', weight: 50, config: { style: 'standard' } },\n      { id: 'variant_a', name: 'Value-First Pricing', weight: 50, config: { style: 'value_first' } }\n    ],\n    status: 'running',\n    trafficSplit: [50, 50],\n    conversionGoals: ['pricing_engagement', 'form_submission'],\n    startDate: new Date(),\n    metrics: {\n      participants: 0,\n      conversions: {},\n      conversionRate: {},\n      statisticalSignificance: {},\n      confidence: {}\n    }\n  },\n  {\n    id: 'form_optimization_test',\n    name: 'Lead Form Optimization',\n    description: 'Testing progressive form disclosure vs standard form',\n    variants: [\n      { id: 'control', name: 'Standard Form', weight: 50, config: { style: 'standard' } },\n      { id: 'variant_a', name: 'Progressive Form', weight: 50, config: { style: 'progressive' } }\n    ],\n    status: 'running',\n    trafficSplit: [50, 50],\n    conversionGoals: ['form_completion', 'form_submission'],\n    targetAudience: {\n      userType: ['new'],\n      deviceType: ['desktop', 'mobile']\n    },\n    startDate: new Date(),\n    metrics: {\n      participants: 0,\n      conversions: {},\n      conversionRate: {},\n      statisticalSignificance: {},\n      confidence: {}\n    }\n  }\n];\n\nexport const ABTestProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [activeTests, setActiveTests] = useState<ABTest[]>(DEFAULT_TESTS);\n  const [userAssignments, setUserAssignments] = useState<UserAssignment>({\n    userId: '',\n    assignments: {},\n    createdAt: new Date()\n  });\n  const [userId, setUserId] = useState<string>('');\n\n  // Initialize user ID and load assignments on mount\n  useEffect(() => {\n    const initializeUser = () => {\n      let storedUserId = localStorage.getItem('ab_test_user_id');\n      if (!storedUserId) {\n        storedUserId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        localStorage.setItem('ab_test_user_id', storedUserId);\n      }\n      \n      setUserId(storedUserId);\n      \n      // Load existing assignments\n      const storedAssignments = localStorage.getItem(`ab_assignments_${storedUserId}`);\n      if (storedAssignments) {\n        try {\n          const assignments = JSON.parse(storedAssignments);\n          setUserAssignments(assignments);\n        } catch (error) {\n          console.error('Failed to parse stored A/B test assignments:', error);\n        }\n      } else {\n        // Create initial assignment structure\n        setUserAssignments({\n          userId: storedUserId,\n          assignments: {},\n          createdAt: new Date()\n        });\n      }\n    };\n\n    initializeUser();\n  }, []);\n\n  // Save assignments when they change\n  useEffect(() => {\n    if (userId && userAssignments.assignments) {\n      localStorage.setItem(`ab_assignments_${userId}`, JSON.stringify(userAssignments));\n    }\n  }, [userId, userAssignments]);\n\n  // Hash function for consistent variant assignment\n  const hashUserId = (userId: string, testId: string): number => {\n    const str = `${userId}_${testId}`;\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n  };\n\n  // Assign user to variant based on traffic split\n  const assignVariant = (test: ABTest): string => {\n    if (userAssignments.assignments[test.id]) {\n      return userAssignments.assignments[test.id];\n    }\n\n    // Check if user matches target audience\n    if (test.targetAudience) {\n      // For now, skip audience filtering - in production would check user attributes\n    }\n\n    const hash = hashUserId(userId, test.id);\n    const bucket = hash % 100;\n    \n    let cumulativeWeight = 0;\n    for (let i = 0; i < test.variants.length; i++) {\n      cumulativeWeight += test.trafficSplit[i];\n      if (bucket < cumulativeWeight) {\n        const variantId = test.variants[i].id;\n        \n        // Store assignment\n        setUserAssignments(prev => ({\n          ...prev,\n          assignments: {\n            ...prev.assignments,\n            [test.id]: variantId\n          }\n        }));\n\n        // Track participation\n        trackParticipation(test.id, variantId);\n        \n        return variantId;\n      }\n    }\n    \n    // Default to first variant if something goes wrong\n    return test.variants[0].id;\n  };\n\n  // Track test participation\n  const trackParticipation = (testId: string, variantId: string) => {\n    setActiveTests(prev => prev.map(test => {\n      if (test.id === testId) {\n        return {\n          ...test,\n          metrics: {\n            ...test.metrics,\n            participants: test.metrics.participants + 1\n          }\n        };\n      }\n      return test;\n    }));\n\n    // Send to analytics (would be real analytics service in production)\n    if (typeof window !== 'undefined') {\n      console.log(`A/B Test Participation: ${testId} -> ${variantId}`);\n    }\n  };\n\n  // Get variant for a specific test\n  const getVariant = (testId: string): string | null => {\n    const test = activeTests.find(t => t.id === testId);\n    if (!test || test.status !== 'running') {\n      return null;\n    }\n\n    return assignVariant(test);\n  };\n\n  // Track conversion event\n  const trackConversion = (testId: string, eventType: string, value?: number) => {\n    const variantId = userAssignments.assignments[testId];\n    if (!variantId) {\n      return; // User not in this test\n    }\n\n    const conversionEvent: ConversionEvent = {\n      testId,\n      variantId,\n      userId,\n      eventType,\n      timestamp: new Date(),\n      value,\n      metadata: { userAgent: navigator.userAgent, url: window.location.href }\n    };\n\n    // Update test metrics\n    setActiveTests(prev => prev.map(test => {\n      if (test.id === testId) {\n        const updatedConversions = {\n          ...test.metrics.conversions,\n          [variantId]: (test.metrics.conversions[variantId] || 0) + 1\n        };\n\n        // Calculate conversion rate\n        const variantParticipants = Object.values(userAssignments.assignments).filter(v => v === variantId).length;\n        const conversionRate = variantParticipants > 0 ? (updatedConversions[variantId] / variantParticipants) * 100 : 0;\n\n        return {\n          ...test,\n          metrics: {\n            ...test.metrics,\n            conversions: updatedConversions,\n            conversionRate: {\n              ...test.metrics.conversionRate,\n              [variantId]: conversionRate\n            }\n          }\n        };\n      }\n      return test;\n    }));\n\n    // Send to analytics\n    console.log('A/B Test Conversion:', conversionEvent);\n\n    // In production, would send to real analytics service\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'ab_test_conversion', {\n        test_id: testId,\n        variant_id: variantId,\n        event_type: eventType,\n        value: value || 0\n      });\n    }\n  };\n\n  // Calculate statistical significance (simplified z-test)\n  const calculateSignificance = (testId: string, variantId: string): number => {\n    const test = activeTests.find(t => t.id === testId);\n    if (!test) return 0;\n\n    const controlVariant = test.variants[0];\n    if (variantId === controlVariant.id) return 0; // Don't compare control to itself\n\n    const controlConversions = test.metrics.conversions[controlVariant.id] || 0;\n    const variantConversions = test.metrics.conversions[variantId] || 0;\n    \n    const controlParticipants = 100; // Simplified - in production would track actual participants per variant\n    const variantParticipants = 100;\n\n    if (controlParticipants < 30 || variantParticipants < 30) {\n      return 0; // Not enough data for significance\n    }\n\n    const p1 = controlConversions / controlParticipants;\n    const p2 = variantConversions / variantParticipants;\n    const pooledP = (controlConversions + variantConversions) / (controlParticipants + variantParticipants);\n    const se = Math.sqrt(pooledP * (1 - pooledP) * ((1 / controlParticipants) + (1 / variantParticipants)));\n    \n    if (se === 0) return 0;\n    \n    const zScore = Math.abs(p2 - p1) / se;\n    \n    // Convert z-score to p-value (simplified)\n    const pValue = 2 * (1 - normalCdf(Math.abs(zScore)));\n    \n    return pValue;\n  };\n\n  // Simplified normal CDF for p-value calculation\n  const normalCdf = (x: number): number => {\n    return 0.5 * (1 + erf(x / Math.sqrt(2)));\n  };\n\n  // Error function approximation\n  const erf = (x: number): number => {\n    const a1 =  0.254829592;\n    const a2 = -0.284496736;\n    const a3 =  1.421413741;\n    const a4 = -1.453152027;\n    const a5 =  1.061405429;\n    const p  =  0.3275911;\n    \n    const sign = x >= 0 ? 1 : -1;\n    x = Math.abs(x);\n    \n    const t = 1.0 / (1.0 + p * x);\n    const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n    \n    return sign * y;\n  };\n\n  // Test management functions\n  const createTest = (testConfig: Omit<ABTest, 'id' | 'metrics'>) => {\n    const newTest: ABTest = {\n      ...testConfig,\n      id: `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      metrics: {\n        participants: 0,\n        conversions: {},\n        conversionRate: {},\n        statisticalSignificance: {},\n        confidence: {}\n      }\n    };\n    \n    setActiveTests(prev => [...prev, newTest]);\n  };\n\n  const updateTest = (testId: string, updates: Partial<ABTest>) => {\n    setActiveTests(prev => prev.map(test => \n      test.id === testId ? { ...test, ...updates } : test\n    ));\n  };\n\n  const startTest = (testId: string) => {\n    updateTest(testId, { status: 'running', startDate: new Date() });\n  };\n\n  const pauseTest = (testId: string) => {\n    updateTest(testId, { status: 'paused' });\n  };\n\n  const stopTest = (testId: string) => {\n    updateTest(testId, { status: 'completed', endDate: new Date() });\n  };\n\n  const getTestResults = (testId: string): ABTestMetrics | null => {\n    const test = activeTests.find(t => t.id === testId);\n    return test ? test.metrics : null;\n  };\n\n  const getConversionRate = (testId: string, variantId: string): number => {\n    const test = activeTests.find(t => t.id === testId);\n    return test?.metrics.conversionRate[variantId] || 0;\n  };\n\n  const isStatisticallySignificant = (testId: string, variantId: string): boolean => {\n    const pValue = calculateSignificance(testId, variantId);\n    return pValue < 0.05; // 95% confidence level\n  };\n\n  const isUserInTest = (testId: string): boolean => {\n    return !!userAssignments.assignments[testId];\n  };\n\n  const getUserId = (): string => {\n    return userId;\n  };\n\n  const contextValue: ABTestContextType = {\n    activeTests,\n    userAssignments,\n    getVariant,\n    trackConversion,\n    createTest,\n    updateTest,\n    startTest,\n    pauseTest,\n    stopTest,\n    getTestResults,\n    getConversionRate,\n    isStatisticallySignificant,\n    isUserInTest,\n    getUserId\n  };\n\n  return (\n    <ABTestContext.Provider value={contextValue}>\n      {children}\n    </ABTestContext.Provider>\n  );\n};\n\nexport const useABTest = (): ABTestContextType => {\n  const context = useContext(ABTestContext);\n  if (!context) {\n    throw new Error('useABTest must be used within an ABTestProvider');\n  }\n  return context;\n};\n\n// Hook for easy variant access\nexport const useVariant = (testId: string) => {\n  const { getVariant, trackConversion, isUserInTest } = useABTest();\n  \n  const variant = getVariant(testId);\n  \n  const track = (eventType: string, value?: number) => {\n    trackConversion(testId, eventType, value);\n  };\n  \n  return {\n    variant,\n    isInTest: isUserInTest(testId),\n    track\n  };\n};\n\n// Declare global gtag for TypeScript\ndeclare global {\n  interface Window {\n    gtag: (command: string, action: string, parameters: any) => void;\n  }\n}","/**\n * Advanced A/B Testing Hooks\n * Provides specialized hooks for different testing scenarios\n */\n\nimport { useEffect, useCallback, useRef } from 'react';\nimport { useABTest, useVariant } from '../contexts/ABTestContext';\nimport { useConversionOptimization } from '../contexts/ConversionOptimizationContext';\n\n// Hook for CTA optimization\nexport const useCTAOptimization = (testId = 'hero_cta_test') => {\n  const { variant, track, isInTest } = useVariant(testId);\n  const { getOptimalCTAText, trackInteraction } = useConversionOptimization();\n  \n  const getCTAText = useCallback(() => {\n    if (!isInTest || !variant) return getOptimalCTAText();\n    \n    const testVariants = {\n      control: 'Get Free Analysis',\n      variant_a: 'Unlock Growth Strategy',\n      variant_b: 'Get My Custom Plan'\n    };\n    \n    return testVariants[variant as keyof typeof testVariants] || getOptimalCTAText();\n  }, [variant, isInTest, getOptimalCTAText]);\n  \n  const trackCTAClick = useCallback((location: string) => {\n    trackInteraction({\n      type: 'click',\n      element: `cta_button_${location}`,\n      value: variant || 'default',\n      metadata: { testId, location }\n    });\n    \n    track('cta_click', 1);\n  }, [track, trackInteraction, variant, testId]);\n  \n  const trackCTAView = useCallback((location: string) => {\n    trackInteraction({\n      type: 'cta_view',\n      element: `cta_button_${location}`,\n      value: variant || 'default',\n      metadata: { testId, location }\n    });\n  }, [trackInteraction, variant, testId]);\n  \n  return {\n    ctaText: getCTAText(),\n    variant,\n    isInTest,\n    trackClick: trackCTAClick,\n    trackView: trackCTAView\n  };\n};\n\n// Hook for pricing optimization\nexport const usePricingOptimization = (testId = 'pricing_display_test') => {\n  const { variant, track, isInTest } = useVariant(testId);\n  const { personalization, trackInteraction } = useConversionOptimization();\n  \n  const getPricingStyle = useCallback(() => {\n    if (!isInTest || !variant) return 'standard';\n    return variant === 'variant_a' ? 'value_first' : 'standard';\n  }, [variant, isInTest]);\n  \n  const shouldShowSavings = useCallback(() => {\n    const style = getPricingStyle();\n    return style === 'value_first' || personalization.pricing.highlightSavings;\n  }, [getPricingStyle, personalization]);\n  \n  const shouldEmphasizeValue = useCallback(() => {\n    return getPricingStyle() === 'value_first' || personalization.pricing.emphasizeValue;\n  }, [getPricingStyle, personalization]);\n  \n  const trackPricingEngagement = useCallback((action: string, plan?: string) => {\n    trackInteraction({\n      type: 'click',\n      element: `pricing_${action}`,\n      value: plan,\n      metadata: { testId, variant, action }\n    });\n    \n    track('pricing_engagement', 1);\n  }, [track, trackInteraction, variant, testId]);\n  \n  return {\n    pricingStyle: getPricingStyle(),\n    variant,\n    isInTest,\n    shouldShowSavings: shouldShowSavings(),\n    shouldEmphasizeValue: shouldEmphasizeValue(),\n    trackEngagement: trackPricingEngagement\n  };\n};\n\n// Hook for form optimization\nexport const useFormOptimization = (testId = 'form_optimization_test') => {\n  const { variant, track, isInTest } = useVariant(testId);\n  const { trackInteraction, updateFunnelStep, trackFormAbandonment } = useConversionOptimization();\n  const formStartTime = useRef<Date | null>(null);\n  \n  const getFormStyle = useCallback(() => {\n    if (!isInTest || !variant) return 'standard';\n    return variant === 'variant_a' ? 'progressive' : 'standard';\n  }, [variant, isInTest]);\n  \n  const trackFormStart = useCallback(() => {\n    formStartTime.current = new Date();\n    updateFunnelStep('form_start', true);\n    trackInteraction({\n      type: 'form_focus',\n      element: 'lead_form',\n      metadata: { testId, variant }\n    });\n    track('form_start', 1);\n  }, [track, trackInteraction, updateFunnelStep, variant, testId]);\n  \n  const trackFormStep = useCallback((stepNumber: number, fieldsCompleted: number) => {\n    trackInteraction({\n      type: 'form_focus',\n      element: `form_step_${stepNumber}`,\n      value: fieldsCompleted,\n      metadata: { testId, variant, stepNumber }\n    });\n  }, [trackInteraction, variant, testId]);\n  \n  const trackFormAbandonmentEvent = useCallback((stepNumber: number, fieldName: string) => {\n    const timeSpent = formStartTime.current ? Date.now() - formStartTime.current.getTime() : 0;\n    \n    trackFormAbandonment(`form_step_${stepNumber}`, fieldName);\n    track('form_abandon', timeSpent / 1000);\n  }, [trackFormAbandonment, track]);\n  \n  const trackFormCompletion = useCallback((completionTime: number) => {\n    updateFunnelStep('form_complete', true, completionTime);\n    trackInteraction({\n      type: 'form_focus',\n      element: 'form_complete',\n      value: completionTime,\n      metadata: { testId, variant, completionTime }\n    });\n    track('form_completion', completionTime);\n  }, [track, trackInteraction, updateFunnelStep, variant, testId]);\n  \n  return {\n    formStyle: getFormStyle(),\n    variant,\n    isInTest,\n    trackFormStart,\n    trackFormStep,\n    trackAbandonment: trackFormAbandonmentEvent,\n    trackCompletion: trackFormCompletion\n  };\n};\n\n// Hook for exit-intent optimization\nexport const useExitIntentOptimization = () => {\n  const { leadScore, isExitIntentEligible } = useConversionOptimization();\n  const { trackConversion } = useABTest();\n  \n  useEffect(() => {\n    const handleExitIntent = (event: CustomEvent) => {\n      const { config, leadTier } = event.detail;\n      \n      // Track exit intent trigger\n      trackConversion('exit_intent_test', 'exit_intent_shown', 1);\n      \n      // Show exit intent modal based on lead tier\n      console.log('Exit intent triggered for tier:', leadTier, config);\n    };\n    \n    const handleExitDismiss = () => {\n      trackConversion('exit_intent_test', 'exit_intent_dismissed', 1);\n    };\n    \n    window.addEventListener('showExitIntent' as any, handleExitIntent);\n    window.addEventListener('dismissExitIntent' as any, handleExitDismiss);\n    \n    return () => {\n      window.removeEventListener('showExitIntent' as any, handleExitIntent);\n      window.removeEventListener('dismissExitIntent' as any, handleExitDismiss);\n    };\n  }, [trackConversion]);\n  \n  return {\n    isEligible: isExitIntentEligible(),\n    leadTier: leadScore?.tier || 'Unqualified'\n  };\n};\n\n// Hook for scroll-based optimization\nexport const useScrollOptimization = () => {\n  const { trackScrollDepth, trackInteraction } = useConversionOptimization();\n  const scrollMilestones = useRef(new Set<number>());\n  \n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollTop = window.pageYOffset;\n      const docHeight = document.documentElement.scrollHeight - window.innerHeight;\n      const scrollPercent = Math.round((scrollTop / docHeight) * 100);\n      \n      // Track major scroll milestones\n      const milestones = [25, 50, 75, 90];\n      milestones.forEach(milestone => {\n        if (scrollPercent >= milestone && !scrollMilestones.current.has(milestone)) {\n          scrollMilestones.current.add(milestone);\n          trackScrollDepth(scrollPercent);\n          trackInteraction({\n            type: 'scroll',\n            element: 'page',\n            value: milestone,\n            metadata: { scrollPercent, milestone }\n          });\n        }\n      });\n    };\n    \n    const throttledScroll = throttle(handleScroll, 100);\n    window.addEventListener('scroll', throttledScroll);\n    \n    return () => window.removeEventListener('scroll', throttledScroll);\n  }, [trackScrollDepth, trackInteraction]);\n  \n  return {\n    milestones: Array.from(scrollMilestones.current)\n  };\n};\n\n// Hook for time-based optimization\nexport const useTimeBasedOptimization = () => {\n  const { trackInteraction } = useConversionOptimization();\n  const timeMilestones = useRef(new Set<number>());\n  \n  useEffect(() => {\n    const intervals = [30, 60, 120, 300]; // seconds\n    \n    intervals.forEach(seconds => {\n      const timeoutId = setTimeout(() => {\n        if (!timeMilestones.current.has(seconds)) {\n          timeMilestones.current.add(seconds);\n          trackInteraction({\n            type: 'scroll', // Using scroll type for time engagement\n            element: 'time_milestone',\n            value: seconds,\n            metadata: { type: 'time_engagement', seconds }\n          });\n        }\n      }, seconds * 1000);\n      \n      return () => clearTimeout(timeoutId);\n    });\n  }, [trackInteraction]);\n  \n  return {\n    engagementMilestones: Array.from(timeMilestones.current)\n  };\n};\n\n// Hook for click heatmap tracking\nexport const useClickHeatmap = () => {\n  const { trackInteraction } = useConversionOptimization();\n  \n  useEffect(() => {\n    const handleClick = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      const rect = target.getBoundingClientRect();\n      \n      trackInteraction({\n        type: 'click',\n        element: target.tagName.toLowerCase(),\n        metadata: {\n          x: event.clientX,\n          y: event.clientY,\n          elementX: rect.left,\n          elementY: rect.top,\n          elementWidth: rect.width,\n          elementHeight: rect.height,\n          className: target.className,\n          id: target.id,\n          textContent: target.textContent?.substring(0, 100)\n        }\n      });\n    };\n    \n    document.addEventListener('click', handleClick);\n    return () => document.removeEventListener('click', handleClick);\n  }, [trackInteraction]);\n};\n\n// Hook for A/B test results\nexport const useTestResults = (testId: string) => {\n  const { getTestResults, getConversionRate, isStatisticallySignificant, activeTests } = useABTest();\n  \n  const test = activeTests.find(t => t.id === testId);\n  const results = getTestResults(testId);\n  \n  const getVariantPerformance = useCallback(() => {\n    if (!test || !results) return [];\n    \n    return test.variants.map(variant => ({\n      id: variant.id,\n      name: variant.name,\n      conversionRate: getConversionRate(testId, variant.id),\n      conversions: results.conversions[variant.id] || 0,\n      isSignificant: isStatisticallySignificant(testId, variant.id),\n      isWinner: results.winner === variant.id\n    }));\n  }, [test, results, testId, getConversionRate, isStatisticallySignificant]);\n  \n  return {\n    test,\n    results,\n    variants: getVariantPerformance(),\n    isRunning: test?.status === 'running',\n    hasWinner: !!results?.winner\n  };\n};\n\n// Utility function for throttling\nconst throttle = (func: Function, delay: number) => {\n  let timeoutId: NodeJS.Timeout;\n  let lastExecTime = 0;\n  \n  return function (...args: any[]) {\n    const currentTime = Date.now();\n    \n    if (currentTime - lastExecTime > delay) {\n      func(...args);\n      lastExecTime = currentTime;\n    } else {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        func(...args);\n        lastExecTime = Date.now();\n      }, delay - (currentTime - lastExecTime));\n    }\n  };\n};","import { createContext, useContext, useState } from 'react';\nimport type { ReactNode } from 'react';\n\ninterface LeadFormContextType {\n  showDropdownForm: boolean;\n  setShowDropdownForm: (show: boolean) => void;\n}\n\nconst LeadFormContext = createContext<LeadFormContextType | undefined>(undefined);\n\nexport const LeadFormProvider = ({ children }: { children: ReactNode }) => {\n  const [showDropdownForm, setShowDropdownForm] = useState(false);\n\n  return (\n    <LeadFormContext.Provider value={{ showDropdownForm, setShowDropdownForm }}>\n      {children}\n    </LeadFormContext.Provider>\n  );\n};\n\n// eslint-disable-next-line react-refresh/only-export-components\nexport const useLeadForm = () => {\n  const context = useContext(LeadFormContext);\n  if (!context) {\n    throw new Error('useLeadForm must be used within a LeadFormProvider');\n  }\n  return context;\n};","import { useEffect } from 'react';\nimport { onCLS, onFID, onFCP, onLCP, onTTFB, onINP } from 'web-vitals';\nimport analytics from '../utils/simpleAnalytics';\n\n/**\n * Simple Core Web Vitals tracking\n * Replaces the over-engineered useEnhancedWebVitals hook\n * Just logs vitals - no complex dashboards or analytics endpoints\n */\nexport function useCoreWebVitals() {\n  useEffect(() => {\n    // Simple Core Web Vitals tracking - log and send to GA4\n    onLCP((metric) => {\n      analytics.coreWebVital('lcp', metric.value, metric.rating);\n    });\n    \n    onFID((metric) => {\n      analytics.coreWebVital('fid', metric.value, metric.rating);\n    });\n    \n    onCLS((metric) => {\n      analytics.coreWebVital('cls', metric.value, metric.rating);\n    });\n    \n    onTTFB((metric) => {\n      analytics.coreWebVital('ttfb', metric.value, metric.rating);\n    });\n    \n    onINP((metric) => {\n      analytics.coreWebVital('inp', metric.value, metric.rating);\n    });\n\n    onFCP((metric) => {\n      analytics.coreWebVital('fcp', metric.value, metric.rating);\n    });\n\n    // Simple scroll depth tracking\n    let maxScroll = 0;\n    const trackedDepths = new Set<number>();\n\n    const handleScroll = () => {\n      const scrollPercent = Math.round(\n        (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100\n      );\n\n      if (scrollPercent > maxScroll) {\n        maxScroll = scrollPercent;\n        \n        [25, 50, 75, 100].forEach(depth => {\n          if (scrollPercent >= depth && !trackedDepths.has(depth)) {\n            trackedDepths.add(depth);\n            analytics.scrollDepth(depth);\n          }\n        });\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n}\n\nexport default useCoreWebVitals;","import React, { createContext, useContext, useReducer, useCallback } from 'react';\nimport type { ReactNode } from 'react';\n\n/**\n * Types for error management\n */\nexport interface AppError {\n  id: string;\n  message: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  timestamp: Date;\n  source: string;\n  details?: Record<string, any>;\n  resolved: boolean;\n}\n\nexport interface ErrorNotification {\n  id: string;\n  title: string;\n  message: string;\n  type: 'error' | 'warning' | 'info' | 'success';\n  duration?: number; // Auto-dismiss duration in ms (0 = persistent)\n  actions?: Array<{\n    label: string;\n    action: () => void;\n    variant?: 'primary' | 'secondary';\n  }>;\n}\n\n/**\n * Error state interface\n */\ninterface ErrorState {\n  errors: AppError[];\n  notifications: ErrorNotification[];\n  isReporting: boolean;\n  globalErrorCount: number;\n}\n\n/**\n * Error actions\n */\ntype ErrorAction =\n  | { type: 'ADD_ERROR'; payload: Omit<AppError, 'id' | 'timestamp' | 'resolved'> }\n  | { type: 'RESOLVE_ERROR'; payload: { id: string } }\n  | { type: 'CLEAR_ERRORS' }\n  | { type: 'ADD_NOTIFICATION'; payload: Omit<ErrorNotification, 'id'> }\n  | { type: 'REMOVE_NOTIFICATION'; payload: { id: string } }\n  | { type: 'CLEAR_NOTIFICATIONS' }\n  | { type: 'SET_REPORTING'; payload: { isReporting: boolean } }\n  | { type: 'INCREMENT_GLOBAL_ERROR_COUNT' };\n\n/**\n * Error context interface\n */\ninterface ErrorContextType {\n  state: ErrorState;\n  addError: (error: Omit<AppError, 'id' | 'timestamp' | 'resolved'>) => string;\n  resolveError: (id: string) => void;\n  clearErrors: () => void;\n  showNotification: (notification: Omit<ErrorNotification, 'id'>) => string;\n  hideNotification: (id: string) => void;\n  clearNotifications: () => void;\n  reportError: (error: Error, context?: Record<string, any>) => Promise<void>;\n  getErrorStats: () => {\n    total: number;\n    bySource: Record<string, number>;\n    bySeverity: Record<string, number>;\n  };\n}\n\n/**\n * Generate unique ID for errors and notifications\n */\nconst generateId = (): string => {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};\n\n/**\n * Initial error state\n */\nconst initialState: ErrorState = {\n  errors: [],\n  notifications: [],\n  isReporting: false,\n  globalErrorCount: 0,\n};\n\n/**\n * Error reducer\n */\nconst errorReducer = (state: ErrorState, action: ErrorAction): ErrorState => {\n  switch (action.type) {\n    case 'ADD_ERROR': {\n      const newError: AppError = {\n        ...action.payload,\n        id: generateId(),\n        timestamp: new Date(),\n        resolved: false,\n      };\n      return {\n        ...state,\n        errors: [...state.errors, newError],\n        globalErrorCount: state.globalErrorCount + 1,\n      };\n    }\n    \n    case 'RESOLVE_ERROR': {\n      return {\n        ...state,\n        errors: state.errors.map(error =>\n          error.id === action.payload.id\n            ? { ...error, resolved: true }\n            : error\n        ),\n      };\n    }\n    \n    case 'CLEAR_ERRORS': {\n      return {\n        ...state,\n        errors: [],\n      };\n    }\n    \n    case 'ADD_NOTIFICATION': {\n      const newNotification: ErrorNotification = {\n        ...action.payload,\n        id: generateId(),\n      };\n      return {\n        ...state,\n        notifications: [...state.notifications, newNotification],\n      };\n    }\n    \n    case 'REMOVE_NOTIFICATION': {\n      return {\n        ...state,\n        notifications: state.notifications.filter(\n          notification => notification.id !== action.payload.id\n        ),\n      };\n    }\n    \n    case 'CLEAR_NOTIFICATIONS': {\n      return {\n        ...state,\n        notifications: [],\n      };\n    }\n    \n    case 'SET_REPORTING': {\n      return {\n        ...state,\n        isReporting: action.payload.isReporting,\n      };\n    }\n    \n    case 'INCREMENT_GLOBAL_ERROR_COUNT': {\n      return {\n        ...state,\n        globalErrorCount: state.globalErrorCount + 1,\n      };\n    }\n    \n    default:\n      return state;\n  }\n};\n\n/**\n * Create error context\n */\nconst ErrorContext = createContext<ErrorContextType | null>(null);\n\n/**\n * Error Context Provider Props\n */\ninterface ErrorProviderProps {\n  children: ReactNode;\n  enableErrorReporting?: boolean;\n}\n\n/**\n * Error Context Provider Component\n * \n * Provides global error state management, notification system,\n * and error reporting capabilities throughout the application.\n * \n * Features:\n * - Centralized error collection and management\n * - User-friendly notification system\n * - Error reporting to external services\n * - Error analytics and statistics\n * - Automatic error categorization\n */\nexport const ErrorProvider: React.FC<ErrorProviderProps> = ({ \n  children, \n  enableErrorReporting = true \n}) => {\n  const [state, dispatch] = useReducer(errorReducer, initialState);\n\n  /**\n   * Add an error to the error collection\n   */\n  const addError = useCallback((error: Omit<AppError, 'id' | 'timestamp' | 'resolved'>): string => {\n    const errorId = generateId();\n    dispatch({ \n      type: 'ADD_ERROR', \n      payload: error \n    });\n\n    // Auto-show notification for high/critical errors\n    if (error.severity === 'high' || error.severity === 'critical') {\n      const notificationTitle = error.severity === 'critical' \n        ? 'Critical Error' \n        : 'Error Occurred';\n\n      showNotification({\n        title: notificationTitle,\n        message: error.message,\n        type: 'error',\n        duration: error.severity === 'critical' ? 0 : 5000, // Critical errors are persistent\n        actions: [\n          {\n            label: 'Dismiss',\n            action: () => hideNotification(errorId),\n            variant: 'secondary',\n          },\n          {\n            label: 'Retry',\n            action: () => {\n              window.location.reload();\n            },\n            variant: 'primary',\n          },\n        ],\n      });\n    }\n\n    return errorId;\n  }, []);\n\n  /**\n   * Mark an error as resolved\n   */\n  const resolveError = useCallback((id: string): void => {\n    dispatch({ type: 'RESOLVE_ERROR', payload: { id } });\n  }, []);\n\n  /**\n   * Clear all errors\n   */\n  const clearErrors = useCallback((): void => {\n    dispatch({ type: 'CLEAR_ERRORS' });\n  }, []);\n\n  /**\n   * Show a notification to the user\n   */\n  const showNotification = useCallback((notification: Omit<ErrorNotification, 'id'>): string => {\n    const notificationId = generateId();\n    dispatch({ \n      type: 'ADD_NOTIFICATION', \n      payload: notification \n    });\n\n    // Auto-dismiss notification if duration is set\n    if (notification.duration && notification.duration > 0) {\n      setTimeout(() => {\n        hideNotification(notificationId);\n      }, notification.duration);\n    }\n\n    return notificationId;\n  }, []);\n\n  /**\n   * Hide a notification\n   */\n  const hideNotification = useCallback((id: string): void => {\n    dispatch({ type: 'REMOVE_NOTIFICATION', payload: { id } });\n  }, []);\n\n  /**\n   * Clear all notifications\n   */\n  const clearNotifications = useCallback((): void => {\n    dispatch({ type: 'CLEAR_NOTIFICATIONS' });\n  }, []);\n\n  /**\n   * Report error to external service\n   */\n  const reportError = useCallback(async (error: Error, context?: Record<string, any>): Promise<void> => {\n    if (!enableErrorReporting) return;\n\n    dispatch({ type: 'SET_REPORTING', payload: { isReporting: true } });\n\n    try {\n      // Prepare error data for reporting\n      const errorData = {\n        message: error.message,\n        stack: error.stack,\n        timestamp: new Date().toISOString(),\n        url: window.location.href,\n        userAgent: navigator.userAgent,\n        context: context || {},\n      };\n\n      // Log for development\n      console.group('ðŸš¨ Reporting Error to External Service');\n      console.error('Error Data:', errorData);\n      console.groupEnd();\n\n      // In production, send to your error reporting service\n      if (import.meta.env.PROD) {\n        // Example integrations (uncomment and configure as needed):\n        \n        // Sentry integration\n        // import * as Sentry from '@sentry/react';\n        // Sentry.captureException(error, { extra: context });\n\n        // Custom API endpoint\n        // await fetch('/api/errors', {\n        //   method: 'POST',\n        //   headers: { 'Content-Type': 'application/json' },\n        //   body: JSON.stringify(errorData),\n        // });\n\n        // LogRocket integration\n        // import LogRocket from 'logrocket';\n        // LogRocket.captureException(error);\n\n        console.log('Error reported successfully');\n      }\n\n      // Add to local error collection\n      addError({\n        message: error.message,\n        severity: 'high',\n        source: 'ErrorReporting',\n        details: { context, stack: error.stack },\n      });\n\n    } catch (reportingError) {\n      console.error('Failed to report error:', reportingError);\n      \n      // Show notification about reporting failure\n      showNotification({\n        title: 'Reporting Failed',\n        message: 'Unable to report error. Please try again or contact support.',\n        type: 'warning',\n        duration: 5000,\n      });\n    } finally {\n      dispatch({ type: 'SET_REPORTING', payload: { isReporting: false } });\n    }\n  }, [enableErrorReporting, addError, showNotification]);\n\n  /**\n   * Get error statistics\n   */\n  const getErrorStats = useCallback(() => {\n    const stats = {\n      total: state.errors.length,\n      bySource: {} as Record<string, number>,\n      bySeverity: {} as Record<string, number>,\n    };\n\n    state.errors.forEach(error => {\n      // Count by source\n      stats.bySource[error.source] = (stats.bySource[error.source] || 0) + 1;\n      \n      // Count by severity\n      stats.bySeverity[error.severity] = (stats.bySeverity[error.severity] || 0) + 1;\n    });\n\n    return stats;\n  }, [state.errors]);\n\n  const contextValue: ErrorContextType = {\n    state,\n    addError,\n    resolveError,\n    clearErrors,\n    showNotification,\n    hideNotification,\n    clearNotifications,\n    reportError,\n    getErrorStats,\n  };\n\n  return (\n    <ErrorContext.Provider value={contextValue}>\n      {children}\n    </ErrorContext.Provider>\n  );\n};\n\n/**\n * Custom hook to use error context\n * \n * @returns Error context with error management functions\n * @throws Error if used outside of ErrorProvider\n */\nexport const useError = (): ErrorContextType => {\n  const context = useContext(ErrorContext);\n  \n  if (!context) {\n    throw new Error('useError must be used within an ErrorProvider');\n  }\n  \n  return context;\n};\n\n/**\n * Custom hook for convenient error reporting\n * \n * @returns Function to report errors with automatic context capture\n */\nexport const useErrorReporter = () => {\n  const { reportError } = useError();\n\n  return useCallback((error: Error, additionalContext?: Record<string, any>) => {\n    // Capture additional context automatically\n    const context = {\n      timestamp: new Date().toISOString(),\n      url: window.location.href,\n      pathname: window.location.pathname,\n      userAgent: navigator.userAgent,\n      ...additionalContext,\n    };\n\n    return reportError(error, context);\n  }, [reportError]);\n};\n\n/**\n * HOC for automatic error boundary integration with error context\n */\nexport const withErrorBoundary = <P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n  errorBoundaryProps?: {\n    level?: 'page' | 'component';\n    name?: string;\n    showDetails?: boolean;\n  }\n) => {\n  const WithErrorBoundaryComponent: React.FC<P> = (props) => {\n    const { reportError } = useError();\n\n    const handleError = (error: Error) => {\n      reportError(error, {\n        component: WrappedComponent.name || 'UnknownComponent',\n        props: Object.keys(props as object),\n      });\n    };\n\n    return (\n      <ErrorBoundary\n        onError={handleError}\n        {...errorBoundaryProps}\n      >\n        <WrappedComponent {...props} />\n      </ErrorBoundary>\n    );\n  };\n\n  WithErrorBoundaryComponent.displayName = `withErrorBoundary(${WrappedComponent.displayName || WrappedComponent.name})`;\n\n  return WithErrorBoundaryComponent;\n};\n\n// Import ErrorBoundary component for use in HOC\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nexport default ErrorContext;"],"names":["createContext","useState","useEffect","useCallback","this","useContext","userId","useRef","jsxDEV","onLCP","onFID","onCLS","onTTFB","onINP","onFCP","useReducer"],"mappings":"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"}