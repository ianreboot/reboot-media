# Production Docker Configuration
# Multi-stage build for optimal size and security

# Stage 1: Build the application
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY server/package*.json ./server/

# Install dependencies
RUN npm ci --only=production && \
    cd server && npm ci --only=production

# Copy source code
COPY . .

# Build frontend and backend
RUN npm run build:prod && \
    npm run server:build

# Stage 2: Production runtime
FROM node:18-alpine AS runtime

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S reboot -u 1001

# Set working directory
WORKDIR /app

# Copy production files
COPY --from=builder --chown=reboot:nodejs /app/dist ./dist
COPY --from=builder --chown=reboot:nodejs /app/server/dist ./server/dist
COPY --from=builder --chown=reboot:nodejs /app/server/node_modules ./server/node_modules
COPY --from=builder --chown=reboot:nodejs /app/server/package.json ./server/package.json

# Health check
COPY --from=builder --chown=reboot:nodejs /app/scripts/health-check.sh ./health-check.sh
RUN chmod +x ./health-check.sh

# Install curl for health checks
RUN apk add --no-cache curl

# Switch to non-root user
USER reboot

# Expose port
EXPOSE 3002

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:3002/api/health || exit 1

# Start server
CMD ["node", "server/dist/server.js"]