# Complete Monitoring and Observability Stack
# Production-ready configuration for Reboot Media

version: '3.8'

services:
  # Prometheus - Time-series metrics database
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: reboot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alert-rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--alertmanager.notification-queue-capacity=10000'
    networks:
      - monitoring
      - reboot-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.rebootmedia.service=prometheus"
      - "com.rebootmedia.environment=production"

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: reboot-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.sendgrid.net:587
      - GF_SMTP_USER=apikey
      - GF_SMTP_PASSWORD=${SENDGRID_API_KEY}
      - GF_SMTP_FROM_ADDRESS=alerts@rebootmedia.net
      - GF_SERVER_DOMAIN=grafana.rebootmedia.net
      - GF_SERVER_ROOT_URL=https://grafana.rebootmedia.net
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
    networks:
      - monitoring
      - reboot-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.rebootmedia.service=grafana"
      - "com.rebootmedia.environment=production"

  # Alertmanager - Alert routing and notification
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: reboot-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./monitoring/alertmanager/templates:/etc/alertmanager/templates:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alertmanager.rebootmedia.net'
      - '--cluster.advertise-address=0.0.0.0:9093'
    environment:
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - PAGERDUTY_SERVICE_KEY_CRITICAL=${PAGERDUTY_SERVICE_KEY_CRITICAL}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    networks:
      - monitoring
      - reboot-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.rebootmedia.service=alertmanager"
      - "com.rebootmedia.environment=production"

  # Elasticsearch - Log storage and search
  elasticsearch-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: reboot-elasticsearch-1
    restart: unless-stopped
    environment:
      - node.name=elasticsearch-1
      - cluster.name=reboot-logs
      - discovery.seed_hosts=elasticsearch-2,elasticsearch-3
      - cluster.initial_master_nodes=elasticsearch-1,elasticsearch-2,elasticsearch-3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch_data_1:/usr/share/elasticsearch/data
      - ./monitoring/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ./monitoring/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro
    ports:
      - "9200:9200"
    networks:
      - logging
      - reboot-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:${ELASTICSEARCH_PASSWORD} https://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "com.rebootmedia.service=elasticsearch"
      - "com.rebootmedia.environment=production"
      - "com.rebootmedia.node=1"

  elasticsearch-2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: reboot-elasticsearch-2
    restart: unless-stopped
    environment:
      - node.name=elasticsearch-2
      - cluster.name=reboot-logs
      - discovery.seed_hosts=elasticsearch-1,elasticsearch-3
      - cluster.initial_master_nodes=elasticsearch-1,elasticsearch-2,elasticsearch-3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch_data_2:/usr/share/elasticsearch/data
      - ./monitoring/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ./monitoring/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro
    networks:
      - logging
      - reboot-network
    depends_on:
      - elasticsearch-1
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:${ELASTICSEARCH_PASSWORD} https://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "com.rebootmedia.service=elasticsearch"
      - "com.rebootmedia.environment=production"
      - "com.rebootmedia.node=2"

  elasticsearch-3:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: reboot-elasticsearch-3
    restart: unless-stopped
    environment:
      - node.name=elasticsearch-3
      - cluster.name=reboot-logs
      - discovery.seed_hosts=elasticsearch-1,elasticsearch-2
      - cluster.initial_master_nodes=elasticsearch-1,elasticsearch-2,elasticsearch-3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch_data_3:/usr/share/elasticsearch/data
      - ./monitoring/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ./monitoring/elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro
    networks:
      - logging
      - reboot-network
    depends_on:
      - elasticsearch-1
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:${ELASTICSEARCH_PASSWORD} https://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "com.rebootmedia.service=elasticsearch"
      - "com.rebootmedia.environment=production"
      - "com.rebootmedia.node=3"

  # Logstash - Log processing pipeline
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: reboot-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/templates:/usr/share/logstash/templates:ro
      - ./monitoring/logstash/certs:/usr/share/logstash/config/certs:ro
    ports:
      - "5044:5044"  # Beats input
      - "5514:5514"  # Syslog input
      - "8080:8080"  # HTTP input
    environment:
      - "LS_JAVA_OPTS=-Xmx2g -Xms2g"
      - ELASTICSEARCH_USERNAME=logstash_system
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - ENVIRONMENT=production
      - SERVICE_VERSION=${SERVICE_VERSION:-1.0.0}
    networks:
      - logging
      - reboot-network
    depends_on:
      - elasticsearch-1
      - elasticsearch-2
      - elasticsearch-3
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.rebootmedia.service=logstash"
      - "com.rebootmedia.environment=production"

  # Kibana - Log analysis and visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: reboot-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    volumes:
      - ./monitoring/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./monitoring/kibana/certs:/usr/share/kibana/config/certs:ro
    environment:
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - KIBANA_ENCRYPTION_KEY=${KIBANA_ENCRYPTION_KEY}
    networks:
      - logging
      - reboot-network
    depends_on:
      - elasticsearch-1
      - elasticsearch-2
      - elasticsearch-3
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "com.rebootmedia.service=kibana"
      - "com.rebootmedia.environment=production"

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: reboot-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.textfile.directory=/var/lib/node_exporter/textfile_collector'
    ports:
      - "9100:9100"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.rebootmedia.service=node-exporter"
      - "com.rebootmedia.environment=production"

  # Blackbox Exporter - Synthetic monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: reboot-blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    volumes:
      - ./monitoring/blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    networks:
      - monitoring
      - reboot-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9115/"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.rebootmedia.service=blackbox-exporter"
      - "com.rebootmedia.environment=production"

  # Redis - Caching and session storage
  redis-cluster:
    image: redis:7.0-alpine
    container_name: reboot-redis-cluster
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./monitoring/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - monitoring
      - reboot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.rebootmedia.service=redis"
      - "com.rebootmedia.environment=production"

  # Nginx - Load balancer and reverse proxy
  nginx-lb:
    image: nginx:1.24-alpine
    container_name: reboot-nginx-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.lb.conf:/etc/nginx/nginx.conf:ro
      - ./monitoring/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - monitoring
      - reboot-network
    depends_on:
      - grafana
      - kibana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.rebootmedia.service=nginx-lb"
      - "com.rebootmedia.environment=production"

  # Filebeat - Log shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: reboot-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx_logs:/var/log/nginx:ro
      - filebeat_data:/usr/share/filebeat/data
    environment:
      - ELASTICSEARCH_HOSTS=https://elasticsearch-1:9200,https://elasticsearch-2:9200,https://elasticsearch-3:9200
      - ELASTICSEARCH_USERNAME=filebeat_system
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    networks:
      - logging
    depends_on:
      - elasticsearch-1
      - logstash
    command: ["--strict.perms=false"]
    labels:
      - "com.rebootmedia.service=filebeat"
      - "com.rebootmedia.environment=production"

volumes:
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reboot/monitoring/data/prometheus

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reboot/monitoring/data/grafana

  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reboot/monitoring/data/alertmanager

  elasticsearch_data_1:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reboot/monitoring/data/elasticsearch-1

  elasticsearch_data_2:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reboot/monitoring/data/elasticsearch-2

  elasticsearch_data_3:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reboot/monitoring/data/elasticsearch-3

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reboot/monitoring/data/redis

  nginx_logs:
    driver: local

  filebeat_data:
    driver: local

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

  logging:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

  reboot-network:
    external: true

# Resource limits and deployment configuration
x-deploy-resources: &deploy-resources
  resources:
    limits:
      cpus: '2.0'
      memory: 4G
    reservations:
      cpus: '1.0'
      memory: 2G

# Health check defaults
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s