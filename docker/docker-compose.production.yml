version: '3.8'

services:
  # Load balancer with automatic failover
  load-balancer:
    image: nginx:alpine
    container_name: reboot-lb-production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/production/nginx:/var/log/nginx
    depends_on:
      - frontend-blue
      - frontend-green
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Blue environment frontend
  frontend-blue:
    image: ghcr.io/reboot/reboot:${VERSION:-latest}
    container_name: reboot-frontend-blue
    expose:
      - "80"
    volumes:
      - ./nginx.production.conf:/etc/nginx/nginx.conf:ro
    environment:
      - NODE_ENV=production
      - DEPLOYMENT_SLOT=blue
    depends_on:
      - backend-blue
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Green environment frontend
  frontend-green:
    image: ghcr.io/reboot/reboot:${VERSION:-latest}
    container_name: reboot-frontend-green
    expose:
      - "80"
    volumes:
      - ./nginx.production.conf:/etc/nginx/nginx.conf:ro
    environment:
      - NODE_ENV=production
      - DEPLOYMENT_SLOT=green
    depends_on:
      - backend-green
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Blue environment backend
  backend-blue:
    image: ghcr.io/reboot/reboot:${VERSION:-latest}
    container_name: reboot-backend-blue
    expose:
      - "3002"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEPLOYMENT_SLOT=blue
      - ENABLE_CORS=false
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX=500
      - JWT_EXPIRES_IN=30m
      - ENABLE_DETAILED_LOGGING=false
      - PERFORMANCE_MONITORING=true
      - REDIS_URL=redis://redis-cluster:6379
    volumes:
      - ./logs/production/blue:/app/logs
    depends_on:
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M

  # Green environment backend
  backend-green:
    image: ghcr.io/reboot/reboot:${VERSION:-latest}
    container_name: reboot-backend-green
    expose:
      - "3002"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEPLOYMENT_SLOT=green
      - ENABLE_CORS=false
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX=500
      - JWT_EXPIRES_IN=30m
      - ENABLE_DETAILED_LOGGING=false
      - PERFORMANCE_MONITORING=true
      - REDIS_URL=redis://redis-cluster:6379
    volumes:
      - ./logs/production/green:/app/logs
    depends_on:
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M

  # Redis cluster for high availability
  redis-cluster:
    image: redis:7-alpine
    container_name: reboot-redis-production
    ports:
      - "6379:6379"
    volumes:
      - redis_data_production:/data
      - ./redis.production.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Monitoring infrastructure
  prometheus:
    image: prom/prometheus:latest
    container_name: reboot-prometheus-production
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_production:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Grafana for production dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: reboot-grafana-production
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data_production:/var/lib/grafana
      - ./grafana/production/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/production/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: reboot-loki-production
    ports:
      - "3100:3100"
    volumes:
      - ./loki.production.yml:/etc/loki/local-config.yaml:ro
      - loki_data_production:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Log shipping
  promtail:
    image: grafana/promtail:latest
    container_name: reboot-promtail-production
    volumes:
      - ./promtail.production.yml:/etc/promtail/config.yml:ro
      - ./logs/production:/var/log/app:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  # Alert manager for production alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: reboot-alertmanager-production
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.production.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: reboot-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

volumes:
  redis_data_production:
    driver: local
  prometheus_data_production:
    driver: local
  grafana_data_production:
    driver: local
  loki_data_production:
    driver: local

networks:
  default:
    name: reboot-production
    driver: bridge