version: '3.8'

services:
  # Frontend (Nginx serving built React app)
  frontend:
    image: ghcr.io/reboot/reboot:${VERSION:-latest}
    container_name: reboot-frontend-staging
    ports:
      - "8080:80"
    volumes:
      - ./nginx.staging.conf:/etc/nginx/nginx.conf:ro
    environment:
      - NODE_ENV=staging
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-staging.rule=Host(`staging.rebootmedia.net`)"
      - "traefik.http.routers.frontend-staging.tls.certresolver=letsencrypt"

  # Backend API
  backend:
    image: ghcr.io/reboot/reboot:${VERSION:-latest}
    container_name: reboot-backend-staging
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=staging
      - LOG_LEVEL=debug
      - ENABLE_CORS=true
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX=1000
      - JWT_EXPIRES_IN=1h
      - ENABLE_DETAILED_LOGGING=true
      - PERFORMANCE_MONITORING=true
    volumes:
      - ./logs/staging:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-staging.rule=Host(`staging.rebootmedia.net`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend-staging.tls.certresolver=letsencrypt"

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: reboot-redis-staging
    ports:
      - "6379:6379"
    volumes:
      - redis_data_staging:/data
      - ./redis.staging.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: reboot-prometheus-staging
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_staging:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: reboot-grafana-staging
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=staging_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data_staging:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: reboot-loki-staging
    ports:
      - "3100:3100"
    volumes:
      - ./loki.staging.yml:/etc/loki/local-config.yaml:ro
      - loki_data_staging:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: reboot-promtail-staging
    volumes:
      - ./promtail.staging.yml:/etc/promtail/config.yml:ro
      - ./logs/staging:/var/log/app:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped

volumes:
  redis_data_staging:
    driver: local
  prometheus_data_staging:
    driver: local
  grafana_data_staging:
    driver: local
  loki_data_staging:
    driver: local

networks:
  default:
    name: reboot-staging
    driver: bridge